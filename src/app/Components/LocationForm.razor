@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Configuration
@using Newtonsoft.Json
@using CampaignManager.Models

@inject IConfiguration Configuration

<EditForm Model="@location" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="CampaignId">Campaign Id: </label>
        <InputText class="form-control" @bind-Value="@CampaignId" disabled></InputText>
    </div>
    <div class="form-group">
        <label for="Id">Id: </label>
        <InputText class="form-control" @bind-Value="@Id" disabled></InputText>
    </div>
    <div class="form-group">
        <label for="@location.Name">Name: </label>
        <InputText class="form-control" @bind-Value="@location.Name"></InputText>
    </div>
    <div class="form-group">
        <label for="@location.Description">Description: </label>
        <InputTextArea class="form-control" @bind-Value="@location.Description"></InputTextArea>
    </div>
    <div class="form-group">
        <label for="@location.Coordinates">Coordinates: </label>
        <div class="form-group ml-5">
            <label for="@location.Coordinates.Latitude">Latitude: </label>
            <InputNumber class="form-control" @bind-Value="@location.Coordinates.Latitude"></InputNumber>
        </div>
        <div class="form-group ml-5">
            <label for="@location.Coordinates.Longitude">Longitude: </label>
            <InputNumber class="form-control" @bind-Value="@location.Coordinates.Longitude"></InputNumber>
        </div>
    </div>
    <div class="form-group">
        <label for="@location.Country">Country: </label>
        <InputSelect class="form-control" @bind-Value="location.Country">
            @foreach (var country in Enum.GetValues(typeof(Country)))
            {
                <option value="@country">@country.ToString()</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="@location.Coalition">Coalition: </label>
        <InputSelect class="form-control" @bind-Value="location.Coalition">
            @foreach (var coalition in Enum.GetValues(typeof(Coalition)))
            {
                <option value="@coalition">@coalition.ToString()</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="@location.Status">Status: </label>
        <InputSelect class="form-control" @bind-Value="location.Status">
            @foreach (var status in Enum.GetValues(typeof(Status)))
            {
                <option value="@status">@status.ToString()</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="@location.Services">Services: </label>
        @foreach (Service service in Enum.GetValues(typeof(Service)))
        {
            bool Checked = false;
            if(location.Services.Contains(service))
            {
                Checked = true;
            }
            <div class="form-group ml-5">
                <input type="checkbox" class="form-check-input" checked="@Checked" @onchange="eventArgs => { CheckboxClicked(service, eventArgs.Value); }" />
                <label class="form-check-label">@service.ToString()</label>
            </div>
        }
    </div>
    <button class="btn btn-lg btn-success" type="submit"><span class="fas fa-lg fa-save mr-2"></span>Save</button>
</EditForm>


@code
{ 
    [Parameter]
    public string CampaignId { get; set; } = Guid.Empty.ToString();
    [Parameter]
    public string Id { get; set; } = Guid.Empty.ToString();


    private Location location = new Location
    {
        Coordinates = new Coordinates(),
        Services = new List<Service>(),
        Items = new List<Item>()
    };


    protected override async Task OnInitializedAsync()
    {
        var url = $"{Configuration["ApiUrl"]}/Location?campaignId={CampaignId}&id={Id}";
        var client = new HttpClient();
        var response = await client.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            location = JsonConvert.DeserializeObject<Location>(await response.Content.ReadAsStringAsync());
        }
    }

    private async Task HandleValidSubmit()
    {
        var url = $"{Configuration["ApiUrl"]}/Object?campaignId={CampaignId}&id={Id}";
        var client = new HttpClient();
        if (Id.Equals(Guid.Empty))
        {
            await client.PostAsJsonAsync<Location>(url, location);
        }
    }

    private void CheckboxClicked(Service service, object aChecked)
    {
        if ((bool)aChecked)
        {
            if (!location.Services.Contains(service))
            {
                location.Services.Add(service);
            }
        }
        else
        {
            if (location.Services.Contains(service))
            {
                location.Services.Remove(service);
            }
        }
        StateHasChanged();
    }
}