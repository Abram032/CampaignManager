@page "/templates/locations/edit/{Id:guid}"
@using Microsoft.Extensions.Configuration
@using CampaignManager.App.Components.Forms
@using CampaignManager.Models

@inject IConfiguration Configuration
@inject HttpClient http
@inject IJSRuntime js

<h1>Location template - Edit</h1>

<LocationForm Location="location" Objects="@objects" OnValidSubmit="@OnValidSubmit"></LocationForm>

@code
{ 
    [Parameter]
    public Guid Id { get; set; }
    [Parameter]
    public Guid CampaignId { get; set; }

    private List<Models.Object> objects = new List<Models.Object>();
    private Location location = new Location
    {
        Id = Guid.NewGuid().ToString(),
        CampaignId = Guid.Empty.ToString(),
        Coordinates = new Coordinates(),
        Services = new List<Service>(),
        Items = new List<Item>()
    };

    protected override async Task OnInitializedAsync()
    {
        var locationUrl = $"{Configuration["ApiUrl"]}/Locations/{Id}?campaignId={CampaignId}";
        location = await http.GetFromJsonAsync<Location>(locationUrl);
        var objectsUrl = $"{Configuration["ApiUrl"]}/Objects?campaignId={Guid.Empty}";
        objects = (await http.GetFromJsonAsync<IEnumerable<Models.Object>>(objectsUrl)).ToList();

    }

    private async Task OnValidSubmit()
    {
        var url = $"{Configuration["ApiUrl"]}/Locations/{Id}?campaignId={CampaignId}";
        await http.PutAsJsonAsync<Location>(url, location);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
    }
}